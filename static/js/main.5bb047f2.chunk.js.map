{"version":3,"sources":["serviceWorker.js","hooks/reducer.js","context/store.js","components/TextProcessor/hooks/useTextProcessor.js","hooks/actions.js","components/TextProcessor/TextProcessor.js","components/Highlight/Highlight.js","components/Sidebar/Sidebar.js","components/App/App.js","utils/fontAwesome.js","index.js"],"names":["Boolean","window","location","hostname","match","reducer","state","action","type","id","payload","text","start","end","color","filter","item","initialState","StoreContext","React","createContext","useTextProcessor","dispatch","useContext","useState","setText","loading","setLoading","showUploader","setShowUploader","handleClick","setTimeout","fetch","then","res","handleChange","event","file","target","files","reader","FileReader","onprogress","onload","result","readAsText","selectedText","selection","getSelection","randomColor","toString","trim","length","selectionData","uuidv1","anchorOffset","focusOffset","mark","document","createElement","style","backgroundColor","opacity","className","sel","rangeCount","range","getRangeAt","cloneRange","append","extractContents","insertNode","removeAllRanges","empty","TextProcessor","accept","onChange","htmlFor","icon","onClick","role","onMouseUp","dangerouslySetInnerHTML","__html","Highlight","border","list","getElementsByClassName","i","outerHTML","innerHTML","removeItem","borderTop","borderRight","borderLeft","borderBottom","Sidebar","store","allHighlights","map","key","alert","getElementsByTagName","reset","App","library","add","faUpload","faTrash","ReactDOM","render","children","useReducer","Provider","value","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bb047f2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://create-react-app.dev/docs/making-a-progressive-web-app/\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","function reducer(state, action) {\n\tswitch (action.type) {\n\t\tcase \"ADD_HIGHLIGHT\":\n      return [\n        ...state,\n        {\n          id: action.payload.id,\n          text: action.payload.text,\n          start: action.payload.start,\n          end: action.payload.end,\n          color: action.payload.color\n        }\n      ]\n    case \"REMOVE_HIGHLIGHT\":\n      return state.filter(item => item.id !== action.payload)\n    case \"RESET_HIGHLIGHTS\":\n      return []\n    default:\n      return state\n\t}\n}\n\nexport default reducer","import React, { useReducer } from \"react\"\nimport reducer from \"../hooks/reducer\"\n\nconst initialState = []\n\nconst StoreContext = React.createContext(initialState)\n\nfunction StoreProvider({children}) {\n  const [store, dispatch] = useReducer(reducer, initialState)\n  \n  return (\n    <StoreContext.Provider value={{store, dispatch}}>\n      {children}\n    </StoreContext.Provider>\n  )\n}\n\nexport { StoreProvider, StoreContext }\n\n\n","import { useState, useContext } from \"react\"\nimport { v1 as uuidv1 } from \"uuid\"\nimport randomColor from \"randomcolor\"\n\nimport { StoreContext } from \"../../../context/store\"\nimport { addHighlight } from \"../../../hooks/actions\"\n\nfunction useTextProcessor() {\n  const { dispatch } = useContext(StoreContext)\n  const [text, setText] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [showUploader, setShowUploader] = useState(true)\n\n  // Load sample text\n  function handleClick() {\n    setShowUploader(false)\n    setLoading(true)\n    setTimeout(() => {\n      fetch('/sample_text.txt')\n        .then(res => res.text())\n        .then(text  => setText(text))\n        setLoading(false)\n    }, 2000) // Mock loading\n  }\n\n    // Handle file upload\n    function handleChange(event) {\n      const file = event.target.files[0]\n      const reader = new FileReader()\n\n      reader.onprogress = event => {\n        setShowUploader(false)\n        setLoading(true)\n      }\n\n      reader.onload = event => {\n        setTimeout(() => {\n          setText(event.target.result)\n          setLoading(false)\n        }, 2000) // Mock loading to demonstrate read.onprogress\n      }\n\n      reader.readAsText(file)\n    }\n\n  // Get the user highlights and save it to state\n  function selectedText() {\n    const selection = window.getSelection()\n    const color = randomColor()\n\n    if ( selection.toString().trim().length !== 0){\n      const selectionData = {\n        id: uuidv1(),\n        text: selection.toString(),\n        start: selection.anchorOffset,\n        end: selection.focusOffset,\n        color: color\n      }\n\n      // Wrap selection in a <mark> tag\n      const mark = document.createElement(\"mark\")\n      mark.style.backgroundColor = color\n      mark.style.opacity = 0.85\n      mark.className = selectionData.id\n\n      if (window.getSelection) {\n        var sel = window.getSelection()\n        if (sel.rangeCount) {\n          var range = sel.getRangeAt(0).cloneRange()\n          mark.append(range.extractContents())\n          range.insertNode(mark)\n        }\n      }\n\n      // Deselect everything\n      if (window.getSelection) {\n        window.getSelection().removeAllRanges()\n      } else if (document.selection) {\n        document.selection.empty()\n      }\n\n      // Save highlight\n      dispatch(addHighlight(selectionData))\n    }\n  }\n\n  return {\n    text,\n    loading,\n    showUploader,\n    handleClick,\n    handleChange,\n    selectedText\n  }\n}\n\nexport default useTextProcessor","const addHighlight = (payload) => {\n  return {\n    type: \"ADD_HIGHLIGHT\",\n    payload\n  }\n}\n\nconst removeHighlight = (payload) => {\n  return {\n    type: \"REMOVE_HIGHLIGHT\",\n    payload\n  }\n}\n\nconst resetHighlights = () => {\n  return {\n    type: \"RESET_HIGHLIGHTS\"\n  }\n}\n\nexport { addHighlight, removeHighlight, resetHighlights }","import React from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport \"./TextProcessor.scss\"\nimport useTextProcessor from \"./hooks/useTextProcessor\"\n\nfunction TextProcessor() {\n  const { loading, showUploader, text, handleClick, handleChange, selectedText } = useTextProcessor()\n\n  return (\n    <>\n      <div className={`uploader ${showUploader ? 'd-block' : 'd-none'}`}>\n        <div className=\"row d-flex flex-column justify-content-center align-items-center align-content-center min-vh-100\">\n          <input\n            type=\"file\"\n            id=\"file\"\n            className=\"input-file\"\n            accept=\".txt\"\n            onChange={event => handleChange(event)}\n          />\n          <label htmlFor=\"file\"><FontAwesomeIcon icon=\"upload\" /> Click here to upload a file</label>\n\n          <div className=\"separator\">or</div>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-light mt-2\"\n            onClick={() => handleClick()}\n          >\n            Try a sample text\n          </button>\n        </div>\n      </div>\n      <div className=\"file-content\">\n        {loading ? \n          <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div>\n        :\n          <div\n            className=\"inner\"\n            onMouseUp={selectedText}\n            dangerouslySetInnerHTML={{__html: text}}\n          ></div>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default TextProcessor\n","import React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport \"./Highlight.scss\"\nimport { StoreContext } from \"../../context/store\"\nimport { removeHighlight } from \"../../hooks/actions\"\n\nfunction Highlight({id, text, color}) {\n  const { dispatch } = useContext(StoreContext)\n \n  function removeItem(id) {\n    while(true) {\n      const list = document.getElementsByClassName(id)\n      for (let i = 0; i < list.length; i++) {\n        list[i].outerHTML = list[i].innerHTML\n      }\n      dispatch(removeHighlight(id))\n      if (list.length === 0) {\n        break\n      }\n    }\n  }\n\n  return (\n    <div className=\"hightlight\">\n      <div\n        className=\"close\"\n        style={{border: `1px solid ${color}`}}\n        onClick={() => removeItem(id)}\n      >\n        <FontAwesomeIcon icon=\"trash\" />\n      </div>\n      <div style={{\n        borderTop: `1px solid ${color}`,\n        borderRight: `1px solid ${color}`,\n        borderLeft: `1px solid ${color}`,\n        borderBottom: `5px solid ${color}`\n      }}>\n        {text}\n      </div>\n    </div>\n  )\n}\n\nHighlight.propTypes = {\n  id: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired\n}\n\nexport default Highlight\n","import React, { useContext } from \"react\"\n\nimport \"./Sidebar.scss\"\nimport { StoreContext } from \"../../context/store\"\nimport { resetHighlights } from \"../../hooks/actions\"\nimport Highlight from \"../Highlight\"\n\nfunction Sidebar() {\n  const { store, dispatch } = useContext(StoreContext)\n\n  function process() {\n    alert(\"Send payload to API endpoint\")\n  }\n  \n  function reset() {\n    while(true) {\n      const list = document.getElementsByTagName(\"mark\")\n      for (let i=0; i < list.length; i++) {\n        list[i].outerHTML = list[i].innerHTML\n      }\n      dispatch(resetHighlights())\n      if (list.length === 0) {\n        break\n      }\n    }\n  }\n\n  // Iterate over the user highlights\n  const allHighlights = store.map(({id, text, color}) => {\n    return(\n      <Highlight key={id} id={id} text={text} color={color} />\n    )\n  })\n\n  return (\n    <div className=\"sidebar vh-100\">\n      {allHighlights}\n      {allHighlights.length !== 0 ? \n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary styled-primary-button btn-block\"\n            onClick={() => process()}\n          >\n            Continue\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-dark btn-block\"\n            onClick={() => reset()}\n          >\n            Reset selections\n          </button>\n        </div>\n      :\n        <div className=\"alert alert-info\">Highlight some text from the document to get started.</div>\n      }\n    </div>\n  )\n}\n\nexport default Sidebar","import React from \"react\"\n\nimport \"./App.scss\"\nimport { FontAwesome } from \"../../utils/fontAwesome\"\n\nimport TextProcessor from \"../TextProcessor\"\nimport Sidebar from \"../Sidebar\"\n\nfunction App() {\n  // FontAwesome utility library\n  FontAwesome()\n\n  return (\n    <div className=\"app container-fluid\">\n      <div className=\"row min-vh-100 no-gutters\">\n        <div className=\"col-9 main-content\">\n          <TextProcessor />\n        </div>\n        <div className=\"col-3 drawer min-vh-100\">\n          <Sidebar />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","import {library} from \"@fortawesome/fontawesome-svg-core\"\n\nimport {\n    faUpload,\n    faTrash\n} from '@fortawesome/free-solid-svg-icons'\n\nexport function FontAwesome() {\n\tlibrary.add(\n        faUpload,\n        faTrash\n    )\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"./styles/bootstrap.scss\"\nimport \"./styles/index.scss\"\n\nimport * as serviceWorker from \"./serviceWorker\"\nimport App from \"./components/App\"\nimport { StoreProvider } from \"./context/store\"\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more: https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.unregister()"],"sourceRoot":""}